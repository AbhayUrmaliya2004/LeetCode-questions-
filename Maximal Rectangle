/*
* Leetcode - (85)
* T.C :- O(M*N) + O(2*N) = O(M*N)
* S.C :- O(M*N) + O(2*N) O(M*N)
* Approach :- Make prefix sum column wise cantaining only one and check the largest histogram form
*/

class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length, n=matrix[0].length ;
        int[][] preSum = new int[m][n] ;
        // prefix sum  array column wise
        for(int j=0 ; j<n ; j++){
            preSum[0][j] = matrix[0][j]=='0'?0:1 ;
        }
        for(int i=1 ; i<m ; i++){
            for(int j=0 ; j<n ; j++){
                if(matrix[i][j] == '0'){
                    preSum[i][j] = 0;
                }else{
                    preSum[i][j] = preSum[i-1][j]+1 ;
                }
            }
        }
        int maxArea = 0;
        for(int i=0 ; i<m ; i++){
            int ans = maxAreaRectangle(preSum[i]);
            maxArea = Math.max(ans, maxArea);
        }
        return maxArea ;
    }
    public int maxAreaRectangle(int[] arr){
        Stack<Integer> st = new Stack<>();
        int n = arr.length ;
        int[] pse = new int[n];
        int[] nse = new int[n];
        
        pse[0] = -1 ;
        st.add(0);
        for(int i=1 ; i<n ; i++){
            while(st.size()>0 && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            
            if(st.size()==0) pse[i] = -1 ;
            else pse[i] = st.peek();
            st.add(i);
        }
        
        while(st.size()>0)st.pop(); // empty stack
        
        nse[n-1] = n ;
        st.add(n-1);
        for(int i=n-2 ; i>=0 ; i--){
            while(st.size()>0 && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            
            if(st.size()==0) nse[i] = n;
            else nse[i] = st.peek();
            st.add(i);
        }
        
        int max = 0;
        for(int i=0 ; i<n ; i++){
            int curr = (nse[i]-pse[i]-1)*arr[i];
            max = Math.max(max, curr);
        }
        
        return max ;
    }
}
