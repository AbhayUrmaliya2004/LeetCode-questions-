// LeetCode - (692)
--> T.C :- O(NlogN), for adding into map O(N)+for making arraylist O(N)+ O(NlogN) for sorting 
--> S.C :- O(N), for map O(N) + for arraylist O(N)

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer>mp = new HashMap<>();
        for(int i=0 ;i<words.length ; i++){
            if(!mp.containsKey(words[i])){
                mp.put(words[i],1);
            }else{
                mp.put(words[i], mp.get(words[i])+1);
            }
        }
        // sorting values 
        List<String> list = new ArrayList<>(mp.keySet());
        
        //need not define datatype here
        Collections.sort(list, new Comparator<>(){
           public int compare(String s1, String s2){
               if(mp.get(s1) > mp.get(s2)){
                   return -1 ; // no swap 
               }else if(mp.get(s1) < mp.get(s2)){
                   return 1 ;
               }else{
                   // same frequency then sort lexographically
                   return s1.compareTo(s2);
               }
           }   
        });
        List<String> ans = new ArrayList<>();
        for(int i=0 ; i<k ; i++){
            ans.add(list.get(i));
        }
        return ans ;
    }
}
