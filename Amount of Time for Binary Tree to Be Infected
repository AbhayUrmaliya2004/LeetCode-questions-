-->LeetCode-(2385)
class Solution {
    public TreeNode getNode(TreeNode root, int start){
        if(root == null)return null ;
        if(root.val == start)return root ;
        TreeNode left = getNode(root.left,start);
        TreeNode right = getNode(root.right,start);
        if(left == null)return right ;
        return left ;
    }
    public void preOrder(TreeNode root, Map<TreeNode,TreeNode> parent){
        if(root == null)return ;
        if(root.left != null) parent.put(root.left,root);
        if(root.right != null) parent.put(root.right,root);
        preOrder(root.left,parent);
        preOrder(root.right,parent);
    }
    public int amountOfTime(TreeNode root, int start) {
        TreeNode node = getNode(root, start);
        //Making child parent connections
        Map<TreeNode, TreeNode> parent = new HashMap<>();
        //preorder to make child parent connection
        preOrder(root, parent);
        
        Map<TreeNode, Integer> visited = new HashMap<>();//checking visited and also levels
        visited.put(node,0);
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(node);
        
        while(q.size()>0){
            TreeNode temp = q.remove();
//            System.out.print(temp.val+" ");
            // FOR LEFT NODE 
            if(temp.left != null && !visited.containsKey(temp.left)){
                q.add(temp.left);
                visited.put(temp.left,visited.get(temp)+1);
            }
            //FOR RIGHT NODE 
            if(temp.right != null && !visited.containsKey(temp.right)){
                q.add(temp.right);
                visited.put(temp.right,visited.get(temp)+1);
            }
            //FOR PARENT NODE
            if(parent.containsKey(temp) && !visited.containsKey(parent.get(temp))){
                q.add(parent.get(temp));
                visited.put(parent.get(temp),visited.get(temp)+1);
            }
        }
        // find the maximum value in mp.values() which will be the minimum time to infect binary tree
        int minTime = -1 ;
        for(int i : visited.values()){
            if(i > minTime)minTime = i ;
        }
        return minTime ;
    }
}
