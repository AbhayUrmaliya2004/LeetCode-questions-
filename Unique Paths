/*
* LeetCode - (62)
* T.C :- O(m*n), faster than 100%
* S.C :- O(m*n), can be do better with tabulation
*/
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m+1][n+1];
        for(int i=0 ; i<=m ; i++){
            for(int j=0 ; j<=n ; j++){
                dp[i][j] = -1 ;
            }
        }
        return dp[0][0] = count(0,0,m,n, dp);
    }
    public int count(int currRow,int currCol,int m,int n, int[][]dp){
        if(currRow == m-1 && currCol == n-1)return 1 ;
        if(currRow > m || currCol > n)return 0 ;
        
        if(dp[currRow][currCol] != -1)return dp[currRow][currCol];
        
        int downWays = count(currRow+1,currCol,m,n,dp);
        int rightWays = count(currRow,currCol+1,m,n,dp);
        
        return dp[currRow][currCol] = downWays+rightWays ;
    }
}
