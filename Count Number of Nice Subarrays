/*
* Leetcode - (1248)
* METHOD - (2)
* T.C. :- O(N)
* S.C :- O(N)
*/
class Solution {

    public int numberOfSubarrays(int[] nums, int k) {
        int currSum = 0, subarrays = 0;
        Map<Integer, Integer> prefixSum = new HashMap<>();
        prefixSum.put(currSum, 1);

        for (int i = 0; i < nums.length; i++) {
            currSum += nums[i] % 2;
            // Find subarrays with sum k ending at i
            if (prefixSum.containsKey(currSum - k)) {
                subarrays = subarrays + prefixSum.get(currSum - k);
            }
            // Increment the current prefix sum in hashmap
            prefixSum.put(currSum, prefixSum.getOrDefault(currSum, 0) + 1);
        }

        return subarrays;
    }
}


/*
* T.C :- O(2*N) = O(N)
* S.C :- O(N)
*/
/* METHOD - 1 */
class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        List<Integer> list = new ArrayList<>();
        list.add(-1);
        int n=nums.length, subarrays=0 ;

        for(int i=0 ; i<n ; i++){
            if(nums[i]%2 != 0) list.add(i);
        }
        list.add(n);

        // count no. of subarrays 
        for(int i=1 ; i<list.size()-k ; i++){
            int leftLen = list.get(i+k)-list.get(i+k-1);
            int rightLen = list.get(i)-list.get(i-1);

            subarrays += leftLen * rightLen;
        }
        return subarrays ;
    }
}
