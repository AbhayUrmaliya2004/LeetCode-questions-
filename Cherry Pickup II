/*
* LeetCode - (1463)
* T.C :- O(m*n)
* S.C :- O(71*3) = O(1)
*/
class Solution {
    int[]move = {-1, 0, 1};
    public int cherryPickup(int[][] grid) {
        int m=grid.length ;
        int n=grid[0].length ;
        int[][][]dp = new int[71][71][71];
        for(int [][]arr2D : dp){
            for(int[] arr1D : arr2D){
                Arrays.fill(arr1D, -1);
            }
        }
        // top-left + top-right
        return helper(grid, 0, 0, n-1, dp);
    }
    public int helper(int[][]grid, int i, int c1, int c2, int[][][]dp){
        if(i == grid.length)return 0;
        if(c1<0 || c2<0 || c1==grid[0].length || c2==grid[0].length)return Integer.MIN_VALUE ;
        
        if(dp[i][c1][c2] != -1)return dp[i][c1][c2];
        
        int max = Integer.MIN_VALUE ;
        int ans = 0 ;
        for(int k=0 ; k<3; k++){
            for(int r=0 ; r<3 ; r++){
                ans = Math.max(ans, helper(grid, i+1, c1 + move[k], c2 + move[r], dp));
            }
        }
        
        ans += (c1==c2)?grid[i][c1] : grid[i][c1]+grid[i][c2];
        return dp[i][c1][c2] = ans ;
    }
}
