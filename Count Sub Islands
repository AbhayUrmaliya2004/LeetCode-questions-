/*
* Leetcode :- (1905)
* T.C :- O(M*N)
* S.C :- O(M*N) for vis array
* Appraoch :- Just traverse the grid2 as bfs and equivalently check whether grid1 also has same
* character or not
*/
class Solution {
    int[] drow = {0, -1, 0, 1};
    int[] dcol = {-1, 0, 1, 0};
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int subIslands = 0, m=grid1.length, n=grid1[0].length;
        boolean[][] vis = new boolean[m][n];
        
        for(int i=0 ; i<m ; i++){
            for(int j=0 ; j<n ; j++){
                if(grid2[i][j] == 1 && grid1[i][j]==1&& !vis[i][j]){  
//                   System.out.println(i+" "+j);
                    vis[i][j] = true;
                    boolean bool = checkSubIsland(i, j, grid1, grid2, vis);
                    if(bool) subIslands++;
                }
            }
        }
        return subIslands;
    }
    public boolean checkSubIsland(int i, int j, int[][]grid1, int[][]grid2, boolean[][] vis){
        int m=grid1.length, n=grid1[0].length;
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        q.add(new Pair<>(i, j));
        
        boolean bool = true;
        while(q.size()>0){
            int row = q.peek().getKey();
            int col = q.peek().getValue();
            q.poll();

            if(grid2[row][col] != grid1[row][col]){
                bool = false;
            }
            
            for(int k=0 ; k<4 ; k++){
                int newr = row+drow[k];
                int newc = col+dcol[k];
                
                if(newr>=0 && newr<m && newc>=0 && newc<n && grid2[newr][newc]==1 && !vis[newr][newc]){
                    q.add(new Pair<>(newr, newc));
                    vis[newr][newc] = true;
                }
            }
        }
        return bool;
    }
}
