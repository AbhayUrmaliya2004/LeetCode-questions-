/*
* LeetCode - (64)
* T.C :- O(m*n)
* S.C :- O(m*n)
*/
class Solution {
    public int minPathSum(int[][] grid) {
        int[][]dp = new int[grid.length][grid[0].length];
        for(int i=0 ; i<grid.length ; i++){
            for(int j=0 ; j<grid[0].length ; j++){
                dp[i][j] = -1 ;
            }
        }
        return dp[0][0] = helper(grid, dp, 0, 0);
    }
    public int helper(int[][] grid, int[][] dp, int i, int j){
        if(i==grid.length-1 && j==grid[0].length-1)
            return grid[i][j] ;
        
        if(i==grid.length || j==grid[0].length){
            return Integer.MAX_VALUE ; 
        }
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        int down = Integer.MAX_VALUE ;
        if(i<grid.length-1){
            down = helper(grid, dp, i+1, j);
        }
        
        int right = Integer.MAX_VALUE ;
        if(j<grid[0].length){
            right = helper(grid, dp, i, j+1);
        }
        
        return dp[i][j] = grid[i][j]+Math.min(down, right);
    }
}
