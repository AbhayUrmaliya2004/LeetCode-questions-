// LeetCode - (216)
--> Backtracking
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        if( n < k*(k+1)/2)return new ArrayList<>();
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(ans, list, k, n, 1, 0);
        return ans ;
    }
    public void helper(List<List<Integer>>ans, List<Integer> list, int k, int n, int curr, int sum){
        if(sum > n)return ;
        if(list.size() == k){
            if(sum == n){
                List<Integer> temp = new ArrayList();
                for(int num : list){
                    temp.add(num);
                }
//                System.out.println("list : "+list);
                ans.add(temp);
                return ;
            }else {
                return ;
            }
        }
        for(int i=curr ; i<=9 ; i++){
            list.add(i);
            sum += i ;
//            System.out.println("curr : "+curr+" sum : "+ sum +" list : "+list);
            helper(ans, list, k, n, i+1, sum);
            // backtracking
            sum -= i;
            list.remove(list.size()-1);
        }
    }
}
