// LeetCode - (200)
--> O(N), N->m*n, NO. OF ELEMENTS 
--> o(N)

class Solution {
    public int numIslands(char[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length] ;
        int count = 0 ;
        for(int i=0 ; i<grid.length ; i++){
            for(int j=0 ; j<grid[0].length ; j++){
                if(grid[i][j] == '1' && !visited[i][j]){
                    count++ ;
//                    System.out.println("count : "+count + " i : "+i+" j : "+j);
                    visited[i][j] = true ;
                    helper(grid ,visited, i, j);
                }
            }
        }
        return count ;
    }
    public void helper(char[][]grid, boolean[][] visited, int i, int j){
        if(grid[i][j] == '0')return ;
        int m = grid.length ;
        int n = grid[0].length ;
        visited[i][j] = true ;
        // check left ;
        if(j>0 && !visited[i][j-1]) helper(grid, visited, i, j-1);
        // check right
        if(j<n-1 && !visited[i][j+1]) helper(grid, visited, i, j+1);
        // check up
        if(i>0 && !visited[i-1][j]) helper(grid, visited, i-1, j);
        // check down 
        if(i<m-1 && !visited[i+1][j]) helper(grid, visited, i+1, j);
    }
}
