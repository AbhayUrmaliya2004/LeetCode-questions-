/*
* Leetcode :- O(1568)
* Approach :- ans can be 0, 1, 2 at max in two days we can disconnect the islands
* If no islands then 0
* maximum two days 
*/
class Solution {
    public int minDays(int[][] grid) {
        int count = countIslands(grid);
        if(count > 1 || count==0) return 0;
        // check is it possible to break it into 1 day
        
        int m=grid.length, n=grid[0].length;
        for(int i=0 ; i<m ; i++){
            for(int j=0 ; j<n ; j++){
                if(grid[i][j] == 1){
                    grid[i][j] = 0;
                    count= countIslands(grid);
                    if(count > 1 || count==0) return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }
    public int countIslands(int[][] grid){
        int m=grid.length, n=grid[0].length, count=0;
        boolean[][] vis = new boolean[m][n];
        
        for(int i=0 ; i<m ; i++){
            for(int j=0 ; j<n ; j++){
                if(grid[i][j] == 1 && !vis[i][j]){
                    count++ ;
                    vis[i][j] = true;
                    // bfs
                    Queue<Pair<Integer, Integer>> q = new LinkedList<>();
                    q.add(new Pair<>(i, j));
                    while(!q.isEmpty()){
                        int row=q.peek().getKey();
                        int col=q.peek().getValue();
                        q.poll();
                        vis[row][col] = true;
                        
                        if(row>0 && grid[row-1][col]==1 && !vis[row-1][col]){
                            q.add(new Pair<>(row-1, col));
                            vis[row-1][col] = true;
                        }
                        if(row<m-1 && grid[row+1][col]==1 && !vis[row+1][col]){
                            q.add(new Pair<>(row+1, col));
                            vis[row+1][col] = true;
                        }
                        if(col>0 && grid[row][col-1]==1 && !vis[row][col-1]){
                            q.add(new Pair<>(row, col-1));
                            vis[row][col-1] = true;
                        }
                        if(col<n-1 && grid[row][col+1]==1 && !vis[row][col+1]){
                            q.add(new Pair<>(row, col+1));
                            vis[row][col+1] = true;
                        }
                    }
                }
            }
        }
        return count;
    }
}
