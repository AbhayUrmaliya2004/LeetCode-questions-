class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {   
        // finding indegree of nodes
        int[] indegree = new int[V];
        for(int node=0 ; node<adj.size() ; node++){
            ArrayList<Integer> adjNode = adj.get(node);
            for(int next=0 ; next<adjNode.size() ; next++){
                int nbr = adjNode.get(next);
                indegree[nbr]++ ;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        int topo[] = new int[V], idx=0 ;
        // fill the indegree with node 0 to queue
        for(int degree=0 ; degree<indegree.length ; degree++){
            if(indegree[degree] == 0){
                q.add(degree);
            }
        }
        
        while(q.size() > 0){
            int node = q.poll();
            topo[idx++] = node;
            
            for(int next : adj.get(node)){
                indegree[next]-- ;
                if(indegree[next]==0){
                    q.add(next);
                }
            }
        }
        return topo ;
    }
}
