/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*
* Leetcode - (1325)
* T.C :- O(N)
* S.C :- O(N), for call stack and no extra space taken 
*/
class Solution {
    public TreeNode removeLeafNodes(TreeNode root, int target) {
        TreeNode tempHead = new TreeNode(-1);
        tempHead.left = root ;
        // solving
        tempHead = helper(tempHead, target);
        return tempHead.left ;
    }
    public TreeNode helper(TreeNode root, int target){
        if(root == null)return null ;
        // checking conditions for removing leaf nodes
        if(root.left!=null && root.left.left==null && root.left.right==null && root.left.val == target) {
            root.left = null ;
        }
        if(root.right!=null && root.right.right==null && root.right.left == null && root.right.val == target){
            root.right = null ;
        }
        
        TreeNode left = helper(root.left, target);
        TreeNode right = helper(root.right, target);
        
        root.left = left ;
        root.right = right ;
        // again check if after removing the remained tree can have leaf node equal to target
        if(root == null)return null ;
        if(root.left!=null && root.left.left==null && root.left.right==null && root.left.val == target) {
            root.left = null ;
        }
        if(root.right!=null && root.right.right==null && root.right.left == null && root.right.val == target){
            root.right = null ;
        }

        return root ;
    }
}
