/*
* LeetCode - (576)
* MEMOISATION Method (1)
*/
class Solution {
    int M = 1000000007 ;
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        int[][][]dp = new int[m+1][n+1][maxMove+1];
        for(int i=0 ; i<=m ; i++){
            for(int j=0 ; j<=n ; j++){
                for(int k=0 ; k<=maxMove ; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        return dp[startRow][startColumn][maxMove] = helper(m, n, maxMove, startRow, startColumn, dp); 
    }
    public int helper(int m, int n, int moves, int row, int col, int[][][] dp){
        if(row < 0 || row == m || col < 0 || col == n){
            return 1;
        }
        if(moves == 0){
            return 0;
        }
        
        if(dp[row][col][moves] != -1){
            return dp[row][col][moves];
        }
        int count = 0 ;
        // left 
        count = (count%M+helper(m, n, moves-1, row, col-1,dp)%M)%M;
        // right 
        count = (count%M+helper(m, n, moves-1, row, col+1, dp)%M)%M;
        // up
        count = (count%M+helper(m, n, moves-1, row-1, col, dp)%M)%M;
        // down
        count = (count%M+helper(m, n, moves-1, row+1, col, dp)%M)%M;
        
        return dp[row][col][moves] = count%M ;
    }
}

/* Tabulation Method - (2)
class Solution {
    public int findPaths(int m, int n, int N, int x, int y) {
        final int M = 1000000000 + 7;
        int[][] dp = new int[m][n];
        dp[x][y] = 1;
        int count = 0;

        for (int moves = 1; moves <= N; moves++) {
            int[][] temp = new int[m][n];

            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (i == m - 1) count = (count + dp[i][j]) % M;
                    if (j == n - 1) count = (count + dp[i][j]) % M;
                    if (i == 0) count = (count + dp[i][j]) % M;
                    if (j == 0) count = (count + dp[i][j]) % M;
                    temp[i][j] = (
                            ((i > 0 ? dp[i - 1][j] : 0) + (i < m - 1 ? dp[i + 1][j] : 0)) % M +
                            ((j > 0 ? dp[i][j - 1] : 0) + (j < n - 1 ? dp[i][j + 1] : 0)) % M
                    ) % M;
                }
            }
            dp = temp;
        }

        return count;
    }
} 
*/
