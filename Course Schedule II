/*
* Leetcode - (210)
* T.C :- O(5*M) = O(M), M->prerequisites.length
* S.C :- O(N) = O(N) for adj list + O(N) for indegree array
                + O(N) for queue + O(N) for list , N->numCourses
*/

class Solution {
  public int[] findOrder(int numCourses, int[][] prerequisites) {
    List<List<Integer>> adj = new ArrayList<>();
    for(int i=0 ; i<numCourses ; i++){
        adj.add(new ArrayList<>());
    }
      
    int[] indegree = new int[numCourses];
    // adjacency list
    for(int[] preq : prerequisites){
        adj.get(preq[0]).add(preq[1]);
        // counting indegree
        indegree[preq[1]]++ ;
    }
      
    Queue<Integer> queue = new LinkedList<>();
    for(int i=0 ; i<numCourses ; i++){
        if(indegree[i] == 0){
            queue.add(i);
        }
    }
     
    int idx = 0;
    List<Integer> list = new ArrayList<>();
    while(queue.size() > 0){
        int curr = queue.remove();
        for(int next : adj.get(curr)){
            indegree[next]-- ;
            if(indegree[next] == 0)
                queue.add(next);
        }
        list.add(curr);
    }
    
    if(list.size()<numCourses) return new int[]{};
    int[] topoOrder = new int[numCourses];
    for(int i=0 ; i<list.size() ; i++){
        topoOrder[numCourses-i-1] = list.get(i);
    }
    return topoOrder;
  }
}
