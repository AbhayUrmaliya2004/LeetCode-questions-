/*
* Leetcode :- (307)
*/
class NumArray {
    int[] seg;
    int n;

    public NumArray(int[] nums) {
        n = nums.length;
        seg = new int[4 * n];
        build(0, nums, 0, n - 1);
    }

    // Helper function to build the segment tree
    private void build(int idx, int[] nums, int l, int r) {
        if (l == r) {
            seg[idx] = nums[l];
        } else {
            int mid = (l + r) / 2;
            build(2 * idx + 1, nums, l, mid);
            build(2 * idx + 2, nums, mid + 1, r);
            seg[idx] = seg[2 * idx + 1] + seg[2 * idx + 2];
        }
    }

    public void update(int index, int val) {
        helperUpdate(0, 0, n - 1, index, val);
    }

    public int sumRange(int left, int right) {
        return helperSumRange(0, 0, n - 1, left, right);
    }

    public int helperSumRange(int idx, int l, int r, int left, int right) {
        if (r < left || l > right) { // no overlap
            return 0;
        } else if (l >= left && r <= right) { // complete overlap
            return seg[idx];
        } else { // partial overlap
            int mid = (l + r) / 2;
            int leftNode = helperSumRange(2 * idx + 1, l, mid, left, right);
            int rightNode = helperSumRange(2 * idx + 2, mid + 1, r, left, right);
            return leftNode + rightNode;
        }
    }

    public void helperUpdate(int idx, int l, int r, int index, int value) {
        if (l == r && l == index) { // when the leaf node is reached
            seg[idx] = value;
            return;
        }
        int mid = (l + r) / 2;
        if (index <= mid) {
            helperUpdate(2 * idx + 1, l, mid, index, value);
        } else {
            helperUpdate(2 * idx + 2, mid + 1, r, index, value);
        }
        seg[idx] = seg[2 * idx + 1] + seg[2 * idx + 2];
    }
}
