// LeetCode -(695)
--> O(m*n), m*n = number of element 
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int m=grid.length, n = grid[0].length ;
        boolean[][]visited = new boolean[m][n];
        int ans = 0;
        for(int i=0 ; i<m ; i++){
            for(int j=0 ;j<n ; j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    visited[i][j] = true ;
                    ans = Math.max(ans,1+helper(i, j, visited, grid));
                }
            }
        }
        return ans;
    }
    public int helper(int i, int j, boolean[][]visited, int[][]matrix){
        int m = visited.length ;
        int n = visited[0].length ;
        int ans = 0 ;
        //check left
        if(j>0 && matrix[i][j-1]==1 && !visited[i][j-1]){
            visited[i][j-1] = true ;
            ans += (helper(i, j-1, visited, matrix)+1);
        }
        //check right
        if(j<n-1 && matrix[i][j+1]==1 && !visited[i][j+1]){
            visited[i][j+1] = true ;
            ans += helper(i, j+1, visited, matrix);
            ans += 1;
        }
        //check up
        if(i>0 && matrix[i-1][j]==1 && !visited[i-1][j]){
            visited[i-1][j] = true ;
            ans += helper(i-1, j, visited, matrix);
            ans += 1;
        }
        //check down
        if(i<m-1 && matrix[i+1][j]==1 && !visited[i+1][j]){
            visited[i+1][j] = true ;
            ans += helper(i+1, j, visited, matrix);
            ans += 1;
        }
        return ans ;
    }
}
