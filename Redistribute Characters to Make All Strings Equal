// LeetCode - (1897)
--> T.C. :- O(n)
--> O(1), constant because even if there are many string but char can't be more than 26

/*
Intuition :- firstly filling the frequencies of characters into arrays
             if frequency is divided equally into all string return true else false 
*/
class Solution {
    public boolean makeEqual(String[] words) {
        Map<Character, Integer> mp = new HashMap<>();
        for(String s : words){
            for(int i=0 ; i<s.length() ; i++){
                
                char ch = s.charAt(i);
                
                if(!mp.containsKey(ch))
                    mp.put(ch, 1);
                else
                   mp.put(ch, mp.get(ch)+1);
            }      
        }
        int n = words.length ;
        // checking that it can be distributed equally or not 
        for(Integer i : mp.values()){
            if(i % n != 0)return false ;
        }
        return true ;
    }
}
