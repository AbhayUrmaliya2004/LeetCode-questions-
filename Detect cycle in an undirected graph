class Pair<U, V> {
    public final U first;
    public final V second;

    public Pair(U first, V second) {
        this.first = first;
        this.second = second;
    }

    public U getKey() {
        return first;
    }

    public V getValue() {
        return second;
    }
}

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[V];
        
        for (int node = 0; node < V; node++) {
            if (!vis[node]) {
                if (isDetected(node, adj, vis)) return true;
            }
        }
        return false;
    }

    public boolean isDetected(int node, ArrayList<ArrayList<Integer>> adj, boolean[] vis) {
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        q.add(new Pair<>(node, -1));  // Start with the initial node and no parent
        
        while (!q.isEmpty()) {
            Pair<Integer, Integer> pair = q.poll();
            int curr = pair.getKey();
            int parent = pair.getValue();
            
            if (vis[curr]) return true;
            
            vis[curr] = true;
            ArrayList<Integer> neighbours = adj.get(curr);
            for (int next : neighbours) {
                if (next != parent) {
                    q.add(new Pair<>(next, curr));
                }
            }
        }
        return false;
    }
}
