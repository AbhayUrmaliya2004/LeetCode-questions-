// Geeks For Geeks (GREEDY ALGORITHM)
--> O(NlogN), for sorting 
--> O(1)

class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) {
        // Your code here
       Arrays.sort(arr,new Comparator<Item>(){
           public int compare(Item one,Item two){
               double c1=(double)one.value/(double)one.weight;
               double c2=(double)two.value/(double)two.weight;
               
               if(c1<c2){
                   return 1;
               }
               else{
                   return -1;
               }
           }
       });
       
       double ans=0;
       for(Item aa:arr){
           int currwt=aa.weight;
           int currval=aa.value;
//           System.out.println(currval+ " "+ currwt);
           if(W-currwt >= 0){
               ans+=currval;
               W=W-currwt;
           }
           else{
               double fraction=(double)currval/(double)currwt;
               ans+=(W*fraction);
               break;
           }
       }
       return ans;
    }
}
