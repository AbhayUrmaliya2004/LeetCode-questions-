//LeetCode-(101)
class Solution {
    
    public boolean isSymmetric(TreeNode root) {
        if(root == null)return true ;
        invertTree(root.left);
        return isSameTree(root.left, root.right);
    }
    public void invertTree(TreeNode root){
        if(root == null)return ;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(q.size()>0){
            TreeNode temp = q.peek();
            TreeNode leftNode = temp.left ;
            TreeNode rightNode = temp.right ;
            
            if(temp.left != null)q.add(leftNode);
            if(temp.right != null)q.add(rightNode);
            
            temp.left = rightNode ;
            temp.right = leftNode ;
            
            q.remove();
        }
    }
    public boolean isSameTree(TreeNode p, TreeNode q){
        if((p == null && q != null) || (p != null && q == null))return false ;
        if(p != null && q != null && p.val != q.val) return false ;
        
        if(p == null && q == null)return true ;
        boolean bool1 = isSameTree(p.left, q.left);
        boolean bool2 = isSameTree(p.right, q.right);
        
        if(bool1 == false || bool2 == false)return false  ;
        return true ;
    }
}
