/*
* Leetcode - (78)
* T.C :- O(2^N) beacuse at each iteration we can either choose an element or not,
*        faster than 100%
* S.C :- O(N) for call stack,
*        better than 85% in memory
*/
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> subsets = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(0, nums, list, subsets);
        return subsets ;
    }
    public void helper(int idx, int[] nums, List<Integer> list, List<List<Integer>>subsets){
        if(idx == nums.length){
            List<Integer> temp = new ArrayList<>(list);
            subsets.add(temp);
            return ;
        }
        
        // choose 
        list.add(nums[idx]);
        helper(idx+1, nums, list, subsets);
        list.remove(list.size()-1);
        // don't choose
        helper(idx+1, nums, list, subsets);
    }
}
