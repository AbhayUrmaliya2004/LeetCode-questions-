/*
* Leetcode :- (3202)
* T.C :- O(N)
* S.C :- O(N)
* Approach :- make maxSuffix array which will tell can we make the remaining array if we take the current element 
* with changing this and considering as one operations
* Try for K-Changes
*/
class Solution {
    public int[] validSequence(String s1, String s2) {
        int n1 = s1.length(), n2 = s2.length();
        int i=n1-1, j=n2-1 ;
        
        int[] maxSuffix = new int[n1];
        
        while(j>=0 && i>=0){
            // finding the maxSuffix array that can be made at ith idx
            if(s1.charAt(i) == s2.charAt(j)){
                maxSuffix[i] = 1+((i<n1-1) ? maxSuffix[i+1]:0) ;
                i-- ;
                j-- ;
            }else{
                maxSuffix[i] = ((i<n1-1) ? maxSuffix[i+1]:0) ;
                i-- ;
            }
        }
        // fill the whole array of maxSuffix
        while(i > 0){
            maxSuffix[i] = (i<n1-1) ? maxSuffix[i+1] : 0;
            i-- ;
        }
        
//        System.out.println(Arrays.toString(maxSuffix));
        // change the index
        i=0;
        j=0;
        // stores the lexographically smallest order that can be made equal as s2
        int[] ans = new int[n2];
        int operations = 1; // we have at max one operation
        while(i<n1 && j<n2){
            if(s1.charAt(i) == s2.charAt(j)){
//                System.out.println("option 1");
                ans[j] = i;
                i++ ;
                j++ ;
            }else if(operations > 0 && i<n1-1 && maxSuffix[i+1] >= n2-j-1){
                // check with the operations left can we make the remaining string
//                System.out.println("option 2");
                operations = 0;
                ans[j] = i; // take the index
                i++ ;
                j++ ;
            }else{
//                System.out.println("option 3");
                i++ ;
            }
        }
        
        if(j != n2) return new int[]{}; // couldn't make the array with the 1 operation
        return ans;
    }
}




