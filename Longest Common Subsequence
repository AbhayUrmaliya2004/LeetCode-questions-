/*
* LeetCode - (1143)
* T.C :- O(m*n) 
* S.C :- O(m*n), O(m*n)+(n) for call stack
*/

## Method - (1), MEMOISATION
class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        int[][]dp = new int[m][n];
        for(int i=0 ; i<m ; i++){
            for(int j=0 ; j<n ; j++){
                dp[i][j] = -1;
            }
        }
        return dp[m-1][n-1] = helper(s1, s2, m-1, n-1, dp);
    }
    public int helper(String s1, String s2, int i, int j, int[][]dp){
        if(i<0 || j<0)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(s1.charAt(i) == s2.charAt(j)){ // same character found
            return dp[i][j] = 1+helper(s1, s2, i-1, j-1, dp);
        }else{
            return dp[i][j] = Math.max(helper(s1, s2, i-1, j, dp), helper(s1, s2, i, j-1, dp));
        }
    }
}
