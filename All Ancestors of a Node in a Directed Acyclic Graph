/*
* Leetcode - (2192)
* T.C :- O(E+V)
* S.C :- O(V)
*/
class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0 ; i<n ; i++){
            adj.add(new ArrayList<>());
        }
        for(int[]arr : edges){
            adj.get(arr[0]).add(arr[1]);
        }
        
        List<Integer> topo = findTopoOrder(adj);
        List<Set<Integer>> ans = new ArrayList<>();
        for(int i=0 ; i<n ; i++){
            ans.add(new HashSet<>());
        }
        
//        System.out.println(topo);
        // main work fill the ancestor nodes to the descendants according to topo order
        for(int curr : topo){
        
            for(var next : adj.get(curr)){
                ans.get(next).add(curr);
                ans.get(next).addAll(ans.get(curr));
            }
        }
        
        List<List<Integer>> res = new ArrayList<>();
        for(int i=0 ; i<n ; i++){
            res.add(new ArrayList<>(ans.get(i)));
            Collections.sort(res.get(i));
        }
        return res;
    }
    
    public List<Integer> findTopoOrder(List<List<Integer>> adj){
        int n = adj.size();
        int[] indegree = new int[n];
        
        for(var temp : adj){
            for(var num : temp){
                indegree[num]++; 
            }
        }
        
        List<Integer> topo = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        for(int i=0 ; i<n ;i++){
            if(indegree[i] == 0)q.add(i);
        }
        
        while(!q.isEmpty()){
            int curr = q.poll();
            for(var next : adj.get(curr)){
                indegree[next]-- ;
                if(indegree[next] == 0)q.add(next);
            }
            topo.add(curr);
        }
        
        return topo ;
    }
}
