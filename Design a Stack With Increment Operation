public class Node{ // doubly linked list
    int val ;
    Node prev ;
    Node next ;
    
    public Node(int val){
        this.val = val;
        this.prev = null ;
        this.next = null ;
    }
}

class CustomStack {

    int size = 0, maxi;
    Node st = null, end = null ;
    public CustomStack(int maxSize) {
        maxi = maxSize;
    }
    
    public void push(int x) {
        if(size == maxi) return ;
        
        Node temp = new Node(x);
        
        if(st == null){
            st = temp;
            end = temp;
        }else{
            temp.prev = end ;
            end.next = temp ;
            end = temp ;
        }
        size++ ;
    }
    
    public int pop() {
        if(size == 0) return -1;
        int ans = end.val;
        
        if(size == 1){
            st = null;
            end = null;
        }else{
            end = end.prev;
            end.next = null;
        }
        size-- ;
        
        return ans;
    }
    
    public void increment(int k, int val){
        Node temp = st;
        int count = 0;
        while(count < k && temp != null){
            temp.val = temp.val+val;
            count++;
            temp = temp.next;
        }
    }
}


/* 
* Leetcode :- O(1381)
* S.C :- O(N)
*/
class CustomStack {

    int st = 0, size=0, end=-1;
    int[] arr;
    public CustomStack(int maxSize) {
        arr = new int[maxSize];
    }
    
    public void push(int x) {
        if(size == arr.length) return ;
        
        if(size == 0){
            end = st;
            arr[st] = x;
        }else{
            end = (end+1)%arr.length;
            arr[end] = x;
        }
        size++ ;
    }
    
    public int pop() {
        if(size == 0) return -1;
        int ans = arr[end];
        end = end-1;
        if(end == -1) end = arr.length-1;
        size-- ;
        return ans;
    }
    
    public void increment(int k, int val) {
        if(size == 0) return;
        if(st <= end){
            
            int limit = Math.min(end, st+k-1);
            for(int i=st ; i<=limit ; i++){
                arr[i] += val ;
            }
            
        }else { // end < st
            int i = st, count = 0;
            while(i != end || count == k){
                arr[i] += val ;
                i = (i+1)%arr.length ;
                count++ ;
            }
        }
    }
}
