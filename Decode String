// LeetCode - (394)
-->T.C.:- O(n)
-->S.C.:- O(n)
class Solution {
    public String decodeString(String s) {
        Stack<String> st = new Stack<>();
        Stack<Integer> num = new Stack<>();
        int i = 0 ;
        while(i < s.length()){
            char ch = s.charAt(i);
//            System.out.println("i : "+i+" ch : "+ch);
            if(ch>='0' && ch<='9'){
                if(i>0 && (s.charAt(i-1)>='0' && s.charAt(i-1)<='9')){
                    int prev = num.pop();
                    int next = ch-'0';
                    num.push(prev*10+next);
                }else{
                    num.push(ch-'0');
                }
            }else if(ch == ']'){
//                System.out.println("st : "+st);
                while(!(st.peek()).equals("[")){
                    String last = st.pop();
                    String first = st.pop();
                    if(first.equals("[")){
                        st.push(last);
//                        System.out.println("i : "+i+" st : "+st);
                        break ;
                    }else{
                        st.push(first+last);
                    }
                }
                String temp = st.peek();
                int n = num.pop();
                for(int j=1 ; j<n ; j++){
                    String t = st.pop();
//                    System.out.println("st.pop() : "+t + " temp : "+temp);
                    st.push(t+temp);
                }
//                System.out.println("st.peek() : "+st.peek());
            }else{
                st.push(""+ch);
            }
            i++ ;
        }
        while(st.size()>1){
            String last = st.pop();
            String first = st.pop();
            st.push(first+last);
        }
        return st.pop();
    }
}
