class Trie {

    boolean isEnd ;
    Trie[] links ;
    public Trie() {
        isEnd = false;
        links = new Trie[26];
    }
    
    public void put(char ch, Trie node){
        links[ch-'a'] = node;
    }
    
    public boolean contains(char ch){
        return links[ch-'a'] != null;
    }
    
    public Trie get(char ch){
        return links[ch-'a'];
    }
    
    public void insert(String word) {
        Trie node = this;
        int n = word.length();
        
        for(int i=0 ; i<n ; i++){
            char ch = word.charAt(i);
            if(!node.contains(ch)){
                node.put(ch, new Trie());
            }
            node = node.get(ch);
        }
        node.isEnd = true;
    }
    
    public boolean search(String word) {
        Trie node = this;
        int n = word.length();
        
        for(int i=0 ; i<n ; i++){
            char ch = word.charAt(i);
            if(!node.contains(ch)){
                return false;
            }
            node = node.get(ch);
        }
        return node.isEnd;
    }
    
    public boolean startsWith(String prefix) {
        Trie node = this;
        int n = prefix.length();
        
        for(int i=0 ; i<n ; i++){
            char ch = prefix.charAt(i);
            if(!node.contains(ch)){
                return false;
            }
            node = node.get(ch);
        }
        
        return true;
    }
}
