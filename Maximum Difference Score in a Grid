/*
* Leetcode - (3148)
* T.C :- O(M*N)
* S.C :- O(M*N)
*/
class Solution {
    int maximum = Integer.MIN_VALUE ;
    public int maxScore(List<List<Integer>> grid) {
        int m=grid.size() , n=grid.get(0).size() ;
        int[][] dp = new int[m][n];
        for(int[] arr : dp){
            Arrays.fill(arr, Integer.MIN_VALUE);
        }
        
        dp[0][0] = helper(0, 0, grid, dp);
        
        return maximum ;
    }
    public int helper(int i, int j, List<List<Integer>> grid, int[][] dp){
        int m = grid.size(), n=grid.get(0).size();
        int maxi = Integer.MIN_VALUE, ans ;
        if(dp[i][j] != Integer.MIN_VALUE) return dp[i][j];
        
        if(i != m-1){
            ans = grid.get(i+1).get(j)-grid.get(i).get(j) + Math.max(0, helper(i+1, j, grid, dp));
            maxi = Math.max(maxi, ans);
        }
        
        if(j != n-1){
            ans = grid.get(i).get(j+1)-grid.get(i).get(j) + Math.max(0, helper(i, j+1, grid, dp));
            maxi = Math.max(maxi, ans);
        }
        
        maximum = Math.max(maxi, maximum);
        return dp[i][j] = maxi;
    }
}
