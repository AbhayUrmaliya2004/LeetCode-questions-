/*
* Leetcode - (539)
* T.C :- O(NlogN) for sorting + O(N) for traversal = O(NlogN)
* S.C :- O(N) for extra list
*/

class Solution {
    public int findMinDifference(List<String> timePoints) {
        int min = 1440; // 24 hours have 24*60 minutes = 1440
        
        int[] list = new int[timePoints.size()];
        
        int idx = 0;
        for(String time : timePoints){
            int hours = Integer.parseInt(time.substring(0, 2));
            int minutes = Integer.parseInt(time.substring(3, 5));
            
            int totalMinutes = hours*60+minutes ;
            list[idx++] = totalMinutes;
        }
        
        Arrays.sort(list);
        
        int n = list.length;
        // diff b/w first and last
        int minDiff = list[0] + (1440 - list[n-1]); 
        
        for(int i=1 ; i<n ; i++){
            minDiff = Math.min(minDiff, list[i]-list[i-1]);
        }
        
        return minDiff;
    }
}
