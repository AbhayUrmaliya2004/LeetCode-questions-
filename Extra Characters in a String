public class Trie{
    boolean endWord ;
    Trie[] links ;
    
    public Trie(){
        endWord = false;
        links = new Trie[26];
    }
    
    public void insert(char ch, Trie node){
        links[ch-'a'] = node;
    }
    
    public Trie get(char ch){
        return links[ch-'a'];
    }
    
    public boolean contains(char ch){
        return links[ch-'a']!=null ;
    }
    
    public void setEnd(){
        endWord = true;
    }
    
    public void insertWord(String word) {
        Trie node = this;
        for (char ch : word.toCharArray()) {
            if (!node.contains(ch)) {
                node.insert(ch, new Trie());
            }
            node = node.get(ch);
        }
        node.setEnd();
    }
}

class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        Trie trie = new Trie();
        
        int[] dp = new int[s.length()];
        Arrays.fill(dp, -1);
        
        for(String str : dictionary){
            trie.insertWord(str);
        }
        
        return helper(s, 0, trie, dp);
    }
    
    public int helper(String s, int idx, Trie trie, int[]dp){   
        int n=s.length();
        
        if(idx == n) return 0;
        if(dp[idx] != -1) return dp[idx];
        
        int count = 0, mini = n;
        
        Trie node = trie;
        for(int i=idx ; i<n ; i++){
            char ch = s.charAt(i);
            
            if(!node.contains(ch)) break;
            
            node = node.get(ch);
            
            if(node.endWord){
                mini = Math.min(mini, helper(s, i+1, trie, dp));
            }
        }
        
        // count itself as extra word 
        count = 1+helper(s, idx+1, trie, dp);
        return dp[idx] = Math.min(count, mini);
    }
}
