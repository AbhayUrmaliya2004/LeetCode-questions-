// LeetCode-(1337)
--> T.C. :- O(NlogN)
--> S.C. :- O(N)
class Solution {
    
    public class Row{
        int row ;
        int ones ;
        
        public Row(int row, int ones){
            this.row = row ;
            this.ones = ones ;
        }
    }
    public class RowCompare implements Comparator<Row>{
        public int compare(Row a, Row b){
            if(a.ones > b.ones)return 1;
            else if(a.ones == b.ones){
                return a.row-b.row ;
            }else return -1 ;
        }
    }
    public int[] kWeakestRows(int[][] mat, int k) {
        PriorityQueue<Row> pq = new PriorityQueue<>(new RowCompare());
        
        // counting ones for all rows 
        for(int i=0 ; i<mat.length ; i++){
            int row = i ;
            int ones = countOnes(mat[i]);
            Row temp = new Row(row, ones);
            pq.add(temp);
        }
        // making ans array 
        int []ans = new int[k];
        int idx = 0 ;
        while(idx < k){
            ans[idx++] = pq.poll().row ;
        }
        return ans ;
    }
    public int countOnes(int[] row){
        int count = 0 ;
        for(int n : row){
            if(n == 1)count++ ;
        }
        return count ;
    }
}
