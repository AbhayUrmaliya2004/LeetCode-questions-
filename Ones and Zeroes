/*
* Leetcode - (474)
* T.C :- O(len*m*n), len -> length of array , m and n are count of zeroes
* S.C :- O(len*m*n)
*/

/* Tabulation */

class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int len = strs.length;
        int[][] count01 = new int[len][2];

        // Count '0's and '1's for each string
        for (int i = 0; i < len; i++) {
            count01[i] = countOnesAndZeroes(strs[i]);
        }

        // Initialize DP array
        int[][][] dp = new int[len][m + 1][n + 1];

        // Fill DP array
        for (int idx = 0; idx < len; idx++) {
            int cnt0 = count01[idx][0];
            int cnt1 = count01[idx][1];

            for (int curr0 = 0; curr0 <= m; curr0++) {
                for (int curr1 = 0; curr1 <= n; curr1++) {
                    // Option 1: Not picking the current string
                    int notPick = (idx > 0) ? dp[idx - 1][curr0][curr1] : 0;

                    // Option 2: Picking the current string if possible
                    int pick = 0;
                    if (curr0 >= cnt0 && curr1 >= cnt1) {
                        pick = 1 + ((idx > 0) ? dp[idx - 1][curr0 - cnt0][curr1 - cnt1] : 0);
                    }

                    // Select the maximum between not picking and picking the current string
                    dp[idx][curr0][curr1] = Math.max(notPick, pick);
                }
            }
        }

        // Return the maximum number of strings that can be formed
        return dp[len - 1][m][n];
    }

    // Helper method to count '0's and '1's in a string
    private int[] countOnesAndZeroes(String s) {
        int[] count = new int[2];
        for (char c : s.toCharArray()) {
            if (c == '0') {
                count[0]++;
            } else {
                count[1]++;
            }
        }
        return count;
    }
}


/* Memoisation */
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int len = strs.length ;
        int[][] count01 = new int[len][2];
        
        for(int i=0 ; i<len ; i++){
            int[] count = countOnesAndZeroes(strs[i]);
            count01[i][0] = count[0];
            count01[i][1] = count[1];
        }
        
        int[][][] dp = new int[len][m+1][n+1];
        for(int i=0 ; i<len ; i++){
            for(int j=0 ; j<=m ; j++){
                for(int k=0 ; k<=n ; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        
        return helper(0, m, n, 0, 0, count01, dp);
    }
    public int helper(int idx, int m, int n, int curr0, int curr1, int[][] count01, int[][][]dp){
        if(curr0 > m || curr1 > n || idx == count01.length){
            return 0;
        }
        
        if(dp[idx][curr0][curr1] != -1) return dp[idx][curr0][curr1];
        // pick or not_pick
        int pick = Integer.MIN_VALUE;
        if(curr0+count01[idx][0] <= m && curr1+count01[idx][1] <= n){
            pick = 1+helper(idx+1, m, n, curr0+count01[idx][0], curr1+count01[idx][1], count01, dp);
        }
        int notPick = helper(idx+1, m, n, curr0, curr1, count01, dp);
        
        return dp[idx][curr0][curr1] = Math.max(pick, notPick);
    }
    public int[] countOnesAndZeroes(String s){
        int[] count = new int[2];
        
        int n = s.length();
        for(int i=0 ; i<n ; i++){
            if(s.charAt(i) == '0') count[0]++ ;
            else count[1]++ ;
        }
        return count ;
    }
}
