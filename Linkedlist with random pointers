/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)return head ;
        
    // MAIKNG ALTERNATE CONNECTIONS
        Node head2 = new Node(100);
        head2.next = head ;
        Node temp = head, t1 = head ,t2 ;
        while(temp != null){
            t1 = temp.next ;
            Node a = new Node(temp.val);
            temp.next = a ;
            a.next = t1 ;
            temp = t1 ;
        }
//       printList(head);
//       printList(head2);
    // Making Random pointer connections 
         t2 = head.next ;
         temp = head ;
         while(temp != null){
             if(temp.random == null)t2.random = null ;
             else t2.random = temp.random.next ;
             temp = t2.next ;
             if(temp == null) break ;
             t2 = temp.next ;
         }
//        printList(head);
//        printList(head2);
        
        head2 = head2.next.next ;
        temp = head ;
        t2 = head2 ;
        
        while(temp != null){
            temp.next = t2.next ;
            temp = t2.next ;
            if(temp == null)break ;
            t2.next = temp.next ;
            t2 = temp.next ;
        }
        return head2 ;
      }
/*      public void printList(Node head){
            while(head != null){
                System.out.print(head.val+" ");
                head = head.next ;
            }
            System.out.println();
       }
 */      
}
