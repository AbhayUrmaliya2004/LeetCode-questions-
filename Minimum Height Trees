/*
* Leetcode - (310)
* T.C :- O(M*N)
* S.C :- O(M*N)
*/
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> ans = new ArrayList<>();
        if (n == 1) {
            ans.add(0);
            return ans;
        }
        List<List<Integer>> tree = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            tree.add(new ArrayList<>());
        }
        
        int[] degree = new int[n];
        for (int[] edge: edges) {
            tree.get(edge[0]).add(edge[1]);
            tree.get(edge[1]).add(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1)
                q.add(i);
        }
        int cnt = n;
        while (cnt > 2) {
            int size = q.size();
            cnt -= q.size();
            for (int i = 0; i < size; i++) {
                int node = q.poll();
                for (Integer nei : tree.get(node)) {
                        if (degree[nei] == 0) continue;
                        if (degree[nei] == 2) {
                            q.add(nei);
                        }
                        degree[nei]--; 
                    }
            }
        }
        ans.addAll(q);
        return ans;
    }
}
