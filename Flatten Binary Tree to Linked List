-->LeetCode-(114)
-->Method-(1)
--> O(n) faster than 100%, recursive solution,  S.C.-O(H)

class Solution {
    public void flatten(TreeNode root) {
        if(root == null)return ;
        TreeNode leftTree = root.left ;
        TreeNode rightTree = root.right ;
        root.left = null ;
        
        flatten(leftTree);
        flatten(rightTree);
        
        root.right = leftTree ;
        TreeNode temp = leftTree ;
        
        while(temp != null && temp.right != null){
            temp = temp.right ;
        } 
        if(temp != null)temp.right = rightTree ;
        else root.right = rightTree ;
    }
}

--> METHOD-(2) (MORRIS TRAVERSAL)
--> ITERATIVE SOLUTION 
-->T.C.-O(N) && S.C.-O(1)
class Solution{
    public void flatten(TreeNode root){
        if(root == null)return ;
        TreeNode curr = root ;
        while(curr != null){
            if(curr.left != null){
                TreeNode pred = curr.left ;
                while(pred.right != null){
                    pred = pred.right ;
                }
                pred.right = curr.right ;
                curr.right = curr.left ;
                curr.left = null ;
            }
            curr = curr.right ;
        }
    }
}
