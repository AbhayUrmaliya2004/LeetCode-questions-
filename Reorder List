/*
* Leetcode - (143)
* Method - (1)
* Approach - Firstly make the half next list reverse and then make connections 
* T.C :- O(N)
* S.C :- O(1)
*/
class Solution {
    public void reorderList(ListNode head) {
        if(head.next == null || head.next.next == null)return ;
        ListNode slow = head, fast = head ;
        while(fast.next.next != null && fast.next.next.next != null){
            slow = slow.next ;
            fast = fast.next.next ;
        }
        ListNode temp2 = reverse(slow.next);
        ListNode temp1 = head, t1 = head.next, t2 = temp2.next ;
        while(t2 != null){
            temp1.next = temp2 ;
            temp2.next = t1 ;
            temp1 = t1 ;
            t1 = t1.next ;
            temp2 = t2 ;
            t2 = t2.next ;
        }
    }
    public ListNode reverse(ListNode head){
        ListNode before = null,after = null, curr = head ;
        while(curr != null){
            after = curr.next ;
            curr.next = before ;
            before = curr ;
            curr = after ;
        }
        return before ;
    }
}
