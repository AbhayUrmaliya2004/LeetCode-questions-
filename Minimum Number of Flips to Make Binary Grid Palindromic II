/*
* Leetcode :- (3240)
* T.C :- O(M*N)
* S.C :- O(1)
*/
class Solution {
    public int minFlips(int[][] grid) {
        int m=grid.length, n=grid[0].length ;
        
        int count = 0 ;
        for(int i=0 ; i<m/2 ; i++){
            for(int j=0 ; j<n/2 ; j++){
                int cnt = grid[i][j]+grid[i][n-j-1]+grid[m-i-1][j]+grid[m-i-1][n-j-1];
                count += Math.min(cnt, 4-cnt);
            }
        }
        
        // check for middle rows and columns 
        int singleOnes=0, doubleOnes=0;
        if(m%2 == 1){
            for(int j=0 ; j<n/2 ; j++){
                int cnt = grid[m/2][j]+grid[m/2][n-j-1];
                
                if(cnt == 1) singleOnes += 1;
                else if(cnt == 2) doubleOnes += 1;
            }
            
            if(n%2==1 && grid[m/2][n/2] == 1)count++ ;
        }
        
        if(n%2 == 1){
            for(int i=0 ; i<m/2 ; i++){
                int cnt = grid[i][n/2]+grid[m-i-1][n/2];
                
                if(cnt == 1) singleOnes += 1;
                else if(cnt == 2) doubleOnes += 1;
            }
        }
//        System.out.println(singleOnes+" "+doubleOnes);
        
        if(doubleOnes%2 == 0){ // double ones are set single ones need to be converted
            return count+singleOnes ;
        }else{ // double ones are even like 3 doubleOnes i.e, 6 ones
            if(singleOnes == 0) return count+2;
            else return count+1+singleOnes-1 ;
        }
    }
}
