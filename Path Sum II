//LeetCode-(113)
//T.C.-O(n)faster than 100% && S.C.-O(H)
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> arr = new ArrayList<>();
        helper(root, ans, arr, targetSum);
        return ans ;
    }
    public void helper(TreeNode root,List<List<Integer>> ans, List<Integer> arr, int sum){
        if(root == null)return ;
        if(root.left == null && root.right == null){
            if(sum == root.val){
                arr.add(root.val);
                List<Integer> temp = new ArrayList<>();
                for(int i : arr){
                    temp.add(i);
                }
                ans.add(temp);
                arr.remove(arr.size()-1);
            }  
            return ;
        }
        arr.add(root.val);
        helper(root.left, ans, arr, sum-root.val); 
        helper(root.right, ans, arr, sum-root.val);
        arr.remove(arr.size()-1);// BackTracking
    }
}
