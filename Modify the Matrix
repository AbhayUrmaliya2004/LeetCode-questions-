/*
* LeetCode - (3033)
* T.C :- O(m*n), m->matrix.length , n->matrix[0].length
* S.C :- O(n)
*/
class Solution {
    public int[][] modifiedMatrix(int[][] matrix) {
        int[]maxInColumn = new int[matrix[0].length];
        for(int j=0 ; j<matrix[0].length ; j++){
            maxInColumn[j] = findMaxInColumn(j, matrix);
        }
        // fill -1 with max In Columns
        for(int i=0 ; i<matrix.length ; i++){
            for(int j=0 ; j<matrix[0].length ; j++){
                if(matrix[i][j] == -1){
                    matrix[i][j] = maxInColumn[j] ;
                }
            }
        }
        return matrix ;
    }
    public int findMaxInColumn(int j, int[][]matrix){
        int max = Integer.MIN_VALUE ;
        for(int i=0 ; i<matrix.length ; i++){
            max = Math.max(matrix[i][j], max);
        }
        return max ;
    }
}
