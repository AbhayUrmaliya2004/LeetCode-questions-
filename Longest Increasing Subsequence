/*
* LeetCode - (300)
* T.C :- O(N)
* S.C :- O(N), for call stack and dp[] array, better than 90% in memory
* can optimise further with tabulation 
* Approach :- Memoisation 
*/
class Solution {
    public int lengthOfLIS(int[] nums) {
        // optimising using memoisation 
        int[]dp = new int[nums.length];
        for(int i=0 ; i<nums.length ; i++){
            dp[i] = -1 ;
        }
        
        int max = 1;
        for(int i=0 ; i<nums.length ; i++){
            int currMax = helper(nums, i+1, nums[i], dp);
            max = Math.max(max, currMax);
        }
        return max ;
    }
    public int helper(int[] nums, int idx, int prev, int[]dp){
        if(idx == nums.length)return 0;
        if(dp[idx] != -1)return dp[idx];
        int max = 1; 
        boolean enter = false ;
        for(int i=idx ; i<nums.length ; i++){
            if(nums[i] > prev){
                enter = true ;
                max = Math.max(max, helper(nums, i+1, nums[i], dp));
            }
        }
        if(enter)return dp[idx] = max+1 ;
        return dp[idx] = max ;
    }
}
