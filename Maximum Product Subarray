/*
* Leetcode - (152)
* T.C :- O(N)
* S.C :- O(1)
* Approach :- make a prefix and suffix prod array and check result, in case getting 0 in the subarray take it as 1 and start new subarray 
*/
# METHOD - (2)
/*
* Leetcode - (152)
* T.C :- O(N)
* S.C :- O(1)
*/
class Solution {
    public int maxProduct(int[] nums) {
        
        int max = Integer.MIN_VALUE, temp = 1;
        int pre = 1, suff = 1, n = nums.length ;
        for (int i = 0; i < nums.length; i++) {
            
            if(pre == 0) pre = 1;
            if(suff == 0) suff = 1;
            
            pre *= nums[i];
            suff *= nums[n-i-1];
            
            max = Math.max(max,Math.max(pre, suff));
        }
        return max;
    }
}
# Method - (1)
class Solution {
    public int maxProduct(int[] nums) {

        int max = Integer.MIN_VALUE, temp = 1;

        for (int i = 0; i < nums.length; i++) {
            temp *= nums[i];
            max = Math.max(temp, max);
            if (temp == 0)
                temp = 1;
        }
        temp = 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            temp *= nums[i];
            max = Math.max(temp, max);
            if (temp == 0)
                temp = 1;
        }
        return max;
    }
}
