/*
* Leetcode - (1631)
* T.C :- O(M * N * log( M * N)) = E log V in terms of graph nodes and edges
* S.C :- O(M*N)
*/ 
class Solution {
    public class Node{
        int effort, x, y ;
        public Node(int _effort, int _x, int _y){
            this.effort = _effort ;
            this.x = _x ;
            this.y = _y ;
        }
        public String toString(){
            return effort+" "+x+" "+y ;
        }
    }
    public int minimumEffortPath(int[][] heights) {
        int m=heights.length, n=heights[0].length ;
        int[][] distance = new int[m][n];
        
        for(int[]arr : distance){
            Arrays.fill(arr, (int)1e9);
        }
        
        int[]drow = {-1, 0, +1, 0};
        int[]dcol = {0, +1, 0, -1};
        
        PriorityQueue<Node> pq = new PriorityQueue<>((n1, n2) -> Integer.compare(n1.effort, n2.effort));
        distance[0][0] = 0;
        pq.add(new Node(0, 0, 0));
        
        while(!pq.isEmpty()){
//            System.out.println("pq : "+pq);
            Node curr = pq.poll();
//            System.out.println(curr);
            int effort = curr.effort;
            int x = curr.x ;
            int y = curr.y ;
            
            if(x==m-1 && y==n-1) return effort;
            
            for(int i=0 ; i<4 ; i++){
                int newr = x+drow[i];
                int newc = y+dcol[i];
                
                if(newr>=0 && newr<m && newc>=0 && newc<n){
                    int diff = Math.abs(heights[newr][newc]-heights[x][y]);
                    int newEffort = Math.max(effort, diff);
                    if(newEffort < distance[newr][newc]){
                        pq.add(new Node(newEffort, newr, newc));
                        distance[newr][newc] = newEffort;
                    }
                }
            }
        }
        return 0;
    }
}
