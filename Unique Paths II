/*
* LeetCode - (63)
* Approach :- Memoisation
* T.C :- O(m*n), faster than 100%
* S.C :- O(m*n), better than 80%, can be do better with tabulation 
*/
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        if(grid[0][0]==1 || grid[grid.length-1][grid[0].length-1]==1)return 0;
        int[][] dp = new int[grid.length][grid[0].length];
        for(int i=0 ; i<grid.length ; i++){
            for(int j=0 ; j<grid[0].length ; j++){
                if(grid[i][j] == 1){
                    dp[i][j] = 0;// this is obstacle no posssible ways 
                }else{
                    dp[i][j] = -1;
                }
            }
        }
        return dp[0][0] = helper(grid, dp, 0, 0);
    }
    public int helper(int[][]grid, int[][]dp, int i, int j){
        if(i==grid.length-1 && j==grid[0].length-1){
            return 1;
        }
        
        if(i==grid.length || j==grid[0].length){
            return 0;
        }
        
        if(dp[i][j] != -1)return dp[i][j] ;
        
        int right = helper(grid, dp, i, j+1);
        int down = helper(grid, dp, i+1, j);
        
        return dp[i][j] = right+down ;
    }
}
