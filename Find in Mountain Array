--> LeetCode- 1095
-->T.C. :- O(nlogn) faster tahn 100%
# Method-(1)
class Solution {
    public int findInMountainArray(int target, MountainArray arr) {
        if(arr.length()==3){
            for(int i=0 ; i<3 ; i++){
                if(arr.get(i)==target)return i;
            }
        }
        int st = 0 ;
        int end = arr.length()-1 ;
        int tip = -1,mid = -1;
        while(st<=end){
            mid = st+(end-st)/2 ;
            if(arr.get(mid)<arr.get(mid+1)){
                tip = mid+1 ;
                st = mid+1 ;
            }else end = mid-1 ;
        }
        //we have found tip 
        int left = findTargetInc(arr, 0, tip, target);
        int right = findTargetDec(arr, tip+1, arr.length()-1, target);
//        System.out.println(left+" "+right+" "+tip);
        if(left == Integer.MAX_VALUE && right == Integer.MAX_VALUE)return -1 ;
        return Math.min(left, right);
    }
    public int findTargetInc(MountainArray arr, int st, int end, int target){ 
        int  mid = -1 ;
        while(st<=end){
            mid = st+(end-st)/2; 
            if(arr.get(mid)==target)return mid ;
            else if( arr.get(mid)> target)end = mid-1 ;
            else st = mid+1 ;
        }
        return Integer.MAX_VALUE;// it means not found 
    }
    public int findTargetDec(MountainArray arr, int st, int end, int target){ 
        int  mid = -1 ;
        while(st<=end){
            mid = st+(end-st)/2; 
            if(arr.get(mid)==target)return mid ;
            else if( arr.get(mid)> target)st = mid+1 ;
            else end = mid-1;
        }
        return Integer.MAX_VALUE;// it means not found 
    }
}
