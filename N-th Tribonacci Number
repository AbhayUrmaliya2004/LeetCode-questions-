// LeetCode - (1137)
Approach :- Dynamic Programming
--> T.C :- O(N), faster than 100%
--> S.C :- O(N),for dp array and stack call

class Solution {
    public int tribonacci(int n) {
        int []dp = new int[n+1];
        Arrays.fill(dp, -1);
        return dp[n] = helper(n, dp);
    }
    int helper(int n, int[] dp){
        // base case 
        if(n==0 || n==1 )
           return dp[n] = n ; 
        if(n==2)
            return dp[n] = 1;
        
        if(dp[n] != -1)
            return dp[n];
        
        return dp[n] = helper(n-1, dp)+helper(n-2, dp)+helper(n-3, dp);
    }
}
