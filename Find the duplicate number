/*
* Leetcode :- (287)
* T.C :- O(N)
* S.C :- O(1), solved follow up 
*/
class Solution {
    public int findDuplicate(int[] nums) {
//         boolean[] contains = new boolean[nums.length];
        // instead of making extra boolean array we can make the indexes of number 
        // with multiplying -1 if already negative then this number I got again
        
        for(int i=0 ; i<nums.length ; i++){
            int idx = Math.abs(nums[i]); // to avoid negative while checking 
            if(nums[idx] < 0) return idx ;
            else nums[idx] = -1*nums[idx];
        }
        return 0;
    }
}

//LeetCode -(287) 
//T.C.  - O(n) faster than 100%
class Solution {
    public int findDuplicate(int[] nums) {
        boolean[] contains = new boolean[nums.length];
        for(int i=0 ; i<nums.length ; i++){
            if(contains[nums[i]])return nums[i] ;
            else contains[nums[i]]=true ;
        }
        return 0;
    }
}
